<prompt>
    <task>
        As a senior software engineer and test architect, your task is to help me write robust and maintainable `unit
        tests` for my Node.js ExpressJS application using Jest.
    </task>

    <context>
        The project is a connection game backend built using JavaScript (Node.js and ExpressJS), and it includes modules
        for user and auth. The current codebase lacks proper test coverage.
    </context>

    <objectives>
        <objective>Identify and recommend key units and integration points that need to be tested.</objective>
        <objective>Generate well-structured, idiomatic Jest test code for selected components.</objective>
        <objective>Explain your reasoning for each test strategy: what is being tested, why, and how.</objective>
        <objective>Suggest best practices for organizing the test files and test data.</objective>
        <objective>Include coverage for edge cases and failure modes (e.g., invalid payloads, unauthorized access,
            unexpected disconnects).
        </objective>
    </objectives>

    <constraints>
        <constraint>Use modern ES modules syntax if applicable.</constraint>
        <constraint>Make each test independent and deterministic.</constraint>
        <constraint>Avoid external dependencies unless mocked (e.g., database, Firebase server).</constraint>
        <constraint>Use mocks/stubs/spies appropriately to isolate behavior.</constraint>
    </constraints>

    <request>
        Please think step-by-step and structure your answer in a clear, hierarchical format:
        <step>List and explain the core testing areas and why each is important in system.</step>
        <step>For each area, provide a short summary of 2-3 key test cases.</step>
        <step>Pick one test case per area and write a Jest test file for it.</step>
        <step>Include code comments (if its critical) explaining the rationale of the test design.</step>
    </request>

    <perspective>
        Adopt the mindset of a principal test engineer at a high-scale messaging platform like Slack or Discord,
        focusing on reliability, maintainability, and developer-friendly test practices.
    </perspective>

    <refinement>
        After you give your initial response, I may say something like "That’s close, but can you adjust the test to
        simulate a database timeout?"—so please be flexible for iteration.
    </refinement>
</prompt>
